{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Node","data","terminal","m","Map","this","root","firstWord","App","useState","val","setVal","suggestions","setSuggesstions","x","setX","y","setY","handleChange","e","keyCode","which","lastword","split","splice","s","trim","temp","idx","ch","has","n","set","get","insert","addWord","word","words","pop","push","join","useEffect","arr","dfs","str","size","k","getLastWord","pos","mirrorDiv","computed","style","properties","isFirefox","window","mozInnerScreenX","mirrorDivDisplayCheckbox","document","getElementById","getCaretCoordinates","element","position","nodeName","createElement","id","body","appendChild","getComputedStyle","whiteSpace","wordWrap","top","offsetTop","parseInt","borderTopWidth","left","visibility","checked","forEach","prop","width","scrollHeight","height","overflowY","overflow","textContent","value","substring","replace","span","backgroundColor","offsetLeft","ele","selectionEnd","coords","className","onChange","target","onKeyPress","map","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1aa5796a.chunk.js","sourcesContent":["import './App.css';\r\nimport { useEffect, useState } from 'react';\r\n\r\nclass Node {\r\n\tterminal = false;\r\n\tdata = '';\r\n\tm = new Map();\r\n\r\n\tconstructor(data, terminal = false) {\r\n\t\tthis.terminal = terminal;\r\n\t\tthis.data = data;\r\n\t}\r\n}\r\n\r\nvar root = new Node('\\0', false);\r\n// we need atleast one word too show suugestions\r\nvar firstWord = false;\r\n\r\nfunction insert(root, s) {\r\n\tif (s.trim() === '') {\r\n\t\treturn;\r\n\t}\r\n\tvar temp = root;\r\n\tfor (let idx in s) {\r\n\t\tlet ch = s[idx];\r\n\t\tif (temp.m.has(ch) === false) {\r\n\t\t\tvar n = new Node(ch);\r\n\t\t\ttemp.m.set(ch, n);\r\n\t\t}\r\n\t\ttemp = temp.m.get(ch);\r\n\t}\r\n\ttemp.terminal = true;\r\n\treturn;\r\n}\r\n\r\n\r\nfunction App() {\r\n\tvar [val, setVal] = useState('');\r\n\tvar [suggestions, setSuggesstions] = useState([]);\r\n\tvar [x,setX] = useState(0);\r\n\tvar [y,setY] = useState(0);\r\n\r\n\tuseEffect(() => {\r\n\t\tvar arr = [];\r\n\r\n\t\tfunction dfs(root, str) {\r\n\t\t\tif (root.m.size === 0) {\r\n\t\t\t\tarr.push(str);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (root.terminal === true) {\r\n\t\t\t\tarr.push(str);\r\n\t\t\t}\r\n\t\t\tfor (let [k, v] of root.m) {\r\n\t\t\t\tdfs(v, str + k);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction getLastWord() {\r\n\t\t\tconst lastword = val.split(\" \").splice(-1)[0].trim();\r\n\t\t\tif (lastword !== '' && firstWord === true) {\r\n\t\t\t\t// show suggestions\r\n\t\t\t\tlet temp = root;\r\n\r\n\t\t\t\tfor (let idx in lastword) {\r\n\t\t\t\t\tvar ch = lastword[idx];\r\n\t\t\t\t\tif (temp.m.has(ch)) {\r\n\t\t\t\t\t\ttemp = temp.m.get(ch);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// currently no word is present return\r\n\t\t\t\t\t\tsetSuggesstions([]);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// currently no word is present return\r\n\t\t\t\tif (temp === root) {\r\n\t\t\t\t\tsetSuggesstions([]);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// now temp points to last charater of last word run a dfs type function to get all words\r\n\t\t\t\tfor (let [k, v] of temp.m) {\r\n\t\t\t\t\tdfs(v, lastword + k);\r\n\t\t\t\t}\r\n\t\t\t\tsetSuggesstions(arr);\r\n\t\t\t\tarr = [];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsetSuggesstions([]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tgetLastWord();\r\n\t\tvar pos = coords();\r\n\t\tsetY(pos.top);\r\n\t\tsetX(pos.left);\r\n\t}, [val]);\r\n\r\n\t// we will insert word when we add space or enter\r\n\tfunction handleChange(e) {\r\n\t\tvar keyCode = (e.keyCode ? e.keyCode : e.which);\r\n\t\tconst lastword = val.split(\" \").splice(-1)[0];\r\n\t\tif (keyCode === 32 || keyCode === 13) {\r\n\t\t\tinsert(root, lastword);\r\n\t\t\t// we have added atleat one word so we can now show suggestions\r\n\t\t\tfirstWord = true;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction coords() {\r\n\t\t// The properties that we copy into a mirrored div.\r\n\t\t// Note that some browsers, such as Firefox,\r\n\t\t// do not concatenate properties, i.e. padding-top, bottom etc. -> padding,\r\n\t\t// so we have to do every single property specifically.\r\n\t\tvar properties = [\r\n\t\t\t'boxSizing',\r\n\t\t\t'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\r\n\t\t\t'height',\r\n\t\t\t'overflowX',\r\n\t\t\t'overflowY',  // copy the scrollbar for IE\r\n\r\n\t\t\t'borderTopWidth',\r\n\t\t\t'borderRightWidth',\r\n\t\t\t'borderBottomWidth',\r\n\t\t\t'borderLeftWidth',\r\n\r\n\t\t\t'paddingTop',\r\n\t\t\t'paddingRight',\r\n\t\t\t'paddingBottom',\r\n\t\t\t'paddingLeft',\r\n\r\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/CSS/font\r\n\t\t\t'fontStyle',\r\n\t\t\t'fontVariant',\r\n\t\t\t'fontWeight',\r\n\t\t\t'fontStretch',\r\n\t\t\t'fontSize',\r\n\t\t\t'lineHeight',\r\n\t\t\t'fontFamily',\r\n\r\n\t\t\t'textAlign',\r\n\t\t\t'textTransform',\r\n\t\t\t'textIndent',\r\n\t\t\t'textDecoration',  // might not make a difference, but better be safe\r\n\r\n\t\t\t'letterSpacing',\r\n\t\t\t'wordSpacing'\r\n\t\t];\r\n\r\n\t\tvar isFirefox = !(window.mozInnerScreenX == null);\r\n\t\tvar mirrorDivDisplayCheckbox = document.getElementById('mirrorDivDisplay');\r\n\t\tvar mirrorDiv, computed, style;\r\n\r\n\t\tconst getCaretCoordinates = function (element, position) {\r\n\t\t\t// mirrored div\r\n\t\t\tmirrorDiv = document.getElementById(element.nodeName + '--mirror-div');\r\n\t\t\tif (!mirrorDiv) {\r\n\t\t\t\tmirrorDiv = document.createElement('div');\r\n\t\t\t\tmirrorDiv.id = element.nodeName + '--mirror-div';\r\n\t\t\t\tdocument.body.appendChild(mirrorDiv);\r\n\t\t\t}\r\n\r\n\t\t\tstyle = mirrorDiv.style;\r\n\t\t\tcomputed = getComputedStyle(element);\r\n\r\n\t\t\t// default textarea styles\r\n\t\t\tstyle.whiteSpace = 'pre-wrap';\r\n\t\t\tif (element.nodeName !== 'INPUT')\r\n\t\t\t\tstyle.wordWrap = 'break-word';  // only for textarea-s\r\n\r\n\t\t\t// position off-screen\r\n\t\t\tstyle.position = 'absolute';  // required to return coordinates properly\r\n\t\t\tstyle.top = element.offsetTop + parseInt(computed.borderTopWidth) + 'px';\r\n\t\t\tstyle.left = \"400px\";\r\n\t\t\tstyle.visibility = mirrorDivDisplayCheckbox.checked ? 'visible' : 'hidden';  // not 'display: none' because we want rendering\r\n\r\n\t\t\t// transfer the element's properties to the div\r\n\t\t\tproperties.forEach(function (prop) {\r\n\t\t\t\tstyle[prop] = computed[prop];\r\n\t\t\t});\r\n\r\n\t\t\tif (isFirefox) {\r\n\t\t\t\tstyle.width = parseInt(computed.width) - 2 + 'px'  // Firefox adds 2 pixels to the padding - https://bugzilla.mozilla.org/show_bug.cgi?id=753662\r\n\t\t\t\t// Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\r\n\t\t\t\tif (element.scrollHeight > parseInt(computed.height))\r\n\t\t\t\t\tstyle.overflowY = 'hidden';\r\n\t\t\t} else {\r\n\t\t\t\tstyle.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\r\n\t\t\t}\r\n\r\n\t\t\tmirrorDiv.textContent = element.value.substring(0, position);\r\n\t\t\t// the second special handling for input type=\"text\" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\r\n\t\t\tif (element.nodeName === 'INPUT')\r\n\t\t\t\tmirrorDiv.textContent = mirrorDiv.textContent.replace(/\\s/g, \"\\u00a0\");\r\n\r\n\t\t\tvar span = document.createElement('span');\r\n\t\t\t// Wrapping must be replicated *exactly*, including when a long word gets\r\n\t\t\t// onto the next line, with whitespace at the end of the line before (#7).\r\n\t\t\t// The  *only* reliable way to do that is to copy the *entire* rest of the\r\n\t\t\t// textarea's content into the <span> created at the caret position.\r\n\t\t\t// for inputs, just '.' would be enough, but why bother?\r\n\t\t\tspan.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\r\n\t\t\tspan.style.backgroundColor = \"lightgrey\";\r\n\t\t\tmirrorDiv.appendChild(span);\r\n\r\n\t\t\tvar coordinates = {\r\n\t\t\t\ttop: span.offsetTop + parseInt(computed['borderTopWidth']),\r\n\t\t\t\tleft: span.offsetLeft + parseInt(computed['borderLeftWidth'])\r\n\t\t\t};\r\n\r\n\t\t\treturn coordinates;\r\n\t\t}\r\n\t\t\r\n\t\tvar ele = document.getElementById('custom_text_area')\r\n\t\tvar coordinates = getCaretCoordinates(ele, ele.selectionEnd);\r\n\t\treturn coordinates;\r\n\t}\r\n\r\n\t// add word in the end if selected \r\n\tfunction addWord(word) {\r\n\t\tvar words = val.split(' ');\r\n\t\twords.pop();\r\n\t\twords.push(word);\r\n\t\tsetVal(words.join(' '));\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<h1>Text Editor</h1>\r\n\t\t\t<div id=\"mirrorDivDisplay\"></div>\r\n\t\t\t<br />\r\n\t\t\t<div className=\"area\">\r\n\t\t\t\t<textarea id='custom_text_area' value={val} onChange={(e) => setVal(e.target.value)} onKeyPress={(e) => handleChange(e)}></textarea>\r\n\t\t\t\t<div className=\"suggestion_box\" style={{'top':y+20,'left': x+60}}>{suggestions.map((val, idx) => <span key={idx} onClick={() => addWord(val)}> {val} </span>)}</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}